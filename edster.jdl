application {
  config {
    baseName edster
    packageName edtech
    applicationType monolith
    authenticationType jwt
    applicationType monolith
    buildTool gradle
    cacheProvider ehcache
    clientFramework react
    clientPackageManager npm
    databaseType sql
    devDatabaseType postgresql
    prodDatabaseType postgresql
    testFrameworks [cucumber, cypress, gatling]
    clientTheme darkly
    clientThemeVariant primary
    nativeLanguage fr
    languages [fr, en, es]
    reactive true
    enableSwaggerCodegen true
  }
  entities Workspace, Presentation, AsciidocSlide, ImageResource, LinkResource, PlantUMLDiagramResource, QRCodeResource
}

dto * with mapstruct
service * with serviceImpl
paginate * with pagination

enum DocumentResourceType {
  IMAGE,
  LINK,
  PLANTUML,
  QRCODE
}

entity Presentation {
  plan String required
  uri String required
  promptUserMessage String
}

entity Workspace {
  name String required
  description String
  promptSystemMessage String
}

entity AsciidocSlide {
  title String
  content String
  notes String
  num Integer min(1)
}

entity ImageResource {
  type DocumentResourceType
  uri String
  resolution String
}

entity LinkResource {
  type DocumentResourceType
  uri String
  target String
}

entity PlantUMLDiagramResource {
  type DocumentResourceType
  uri String
  umlCode String
}

entity QRCodeResource {
  type DocumentResourceType
  uri String
  data String
}

relationship OneToOne {
   Workspace{user(login)} to @OnUpdate("CASCADE") User with builtInEntity,
}

relationship ManyToOne {
  Presentation to @OnUpdate("CASCADE") Workspace{presentations}
  AsciidocSlide to @OnUpdate("CASCADE") Presentation{slides},
  ImageResource to @OnUpdate("CASCADE") AsciidocSlide{images},
  LinkResource to @OnUpdate("CASCADE") AsciidocSlide{links},
  PlantUMLDiagramResource to @OnUpdate("CASCADE") AsciidocSlide{diagrams},
  QRCodeResource to @OnUpdate("CASCADE") AsciidocSlide{qrcodes},
}
